#!/usr/bin/env python3
"""
Example usage of the PAGE-XML to COCO converter for RF-DETR training.

This script demonstrates how to use the converter and then train an RF-DETR model
on the converted dataset.
"""

import os
import sys
from pathlib import Path

def main():
    # Example usage of the converter
    print("=== PAGE-XML to COCO Converter Example ===")
    print()
    print("1. First, install the required dependencies:")
    print("   pip install -r requirements.txt")
    print()
    print("2. Run the converter with default 896x640 resizing (recommended for RF-DETR):")
    print("   python convert_pagexml_to_coco.py \\")
    print("       --input_dir /path/to/your/pagexml/files \\")
    print("       --output_dir /path/to/output/coco_dataset \\")
    print("       --test_size 0.2 \\")
    print("       --val_size 0.1")
    print()
    print("   Or with custom image size (must be divisible by 56):")
    print("   python convert_pagexml_to_coco.py \\")
    print("       --input_dir /path/to/your/pagexml/files \\")
    print("       --output_dir /path/to/output/coco_dataset \\")
    print("       --target_width 1120 \\")
    print("       --target_height 800")
    print()
    print("   Or without resizing (use original image dimensions):")
    print("   python convert_pagexml_to_coco.py \\")
    print("       --input_dir /path/to/your/pagexml/files \\")
    print("       --output_dir /path/to/output/coco_dataset \\")
    print("       --no_resize")
    print()
    print("3. The converter will create the following structure:")
    print("   dataset/")
    print("   ├── train/")
    print("   │   ├── _annotations.coco.json")
    print("   │   ├── image1.jpg")
    print("   │   └── ...")
    print("   ├── valid/")
    print("   │   ├── _annotations.coco.json")
    print("   │   ├── image1.jpg")
    print("   │   └── ...")
    print("   └── test/")
    print("       ├── _annotations.coco.json")
    print("       ├── image1.jpg")
    print("       └── ...")
    print()
    print("4. Train RF-DETR on the converted dataset:")
    print("   ")
    print("   # Option A: Use the provided training script (recommended)")
    print("   python train_rf_detr.py \\")
    print("       --model_size base \\")
    print("       --dataset_dir /path/to/output/coco_dataset \\")
    print("       --output_dir ./rf_detr_output \\")
    print("       --epochs 20")
    print("   ")
    print("   # With early stopping (default: enabled)")
    print("   python train_rf_detr.py \\")
    print("       --model_size base \\")
    print("       --dataset_dir /path/to/output/coco_dataset \\")
    print("       --output_dir ./rf_detr_output \\")
    print("       --epochs 50 \\")
    print("       --early_stopping_patience 7 \\")
    print("       --early_stopping_min_delta 0.002")
    print("   ")
    print("   # Disable early stopping")
    print("   python train_rf_detr.py \\")
    print("       --model_size base \\")
    print("       --dataset_dir /path/to/output/coco_dataset \\")
    print("       --output_dir ./rf_detr_output \\")
    print("       --epochs 20 \\")
    print("       --no_early_stopping")
    print("   ")
    print("   # Available model sizes:")
    print("   #   nano    - Fastest, smallest, good for edge devices")
    print("   #   small   - Balanced performance and speed")
    print("   #   base    - Default, good general performance")
    print("   #   medium  - Higher accuracy")
    print("   #   large   - Highest accuracy, requires more resources")
    print("   ")
    print("   # Option B: Manual training with specific model size")
    print("   from rfdetr import RFDETRBase  # or RFDETRNano, RFDETRSmall, etc.")
    print("   model = RFDETRBase()")
    print("   model.train(")
    print("       dataset_dir='/path/to/output/coco_dataset',")
    print("       epochs=20,")
    print("       batch_size=4,")
    print("       grad_accum_steps=4,")
    print("       lr=1e-4,")
    print("       output_dir='./rf_detr_output'")
    print("   )")
    print()
    print("5. For inference with your trained model:")
    print("   model = RFDETRBase(pretrain_weights='./rf_detr_output/checkpoint_best_total.pth')")
    print("   detections = model.predict('/path/to/image.jpg')")
    print()
    print("=== Key Features ===")
    print("✓ Handles multiple PAGE-XML namespace schemas")
    print("✓ Converts polygon coordinates to COCO segmentation format")
    print("✓ Optimal dataset splitting using scikit-learn")
    print("✓ Creates proper directory structure for RF-DETR training")
    print("✓ Single class 'text_line' for text line segmentation")
    print("✓ Image resizing with coordinate scaling (default: 896x640)")
    print("✓ RF-DETR compatible dimensions (divisible by 56)")
    print("✓ Preserves polygon accuracy during resizing")
    print("✓ Optional: Use original image dimensions with --no_resize")
    print("✓ RF-DETR class indexing fix (adds dummy background class)")
    print("✓ Early stopping to prevent overfitting (enabled by default)")
    print("✓ Configurable early stopping parameters")

if __name__ == "__main__":
    main()

